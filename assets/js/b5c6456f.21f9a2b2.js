"use strict";(self.webpackChunkmy_learnings=self.webpackChunkmy_learnings||[]).push([[35],{3905:(t,e,a)=>{a.d(e,{Zo:()=>m,kt:()=>c});var r=a(7294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},l=Object.keys(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var p=r.createContext({}),s=function(t){var e=r.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},m=function(t){var e=s(t.components);return r.createElement(p.Provider,{value:e},t.children)},d="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},k=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,l=t.originalType,p=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),d=s(a),k=n,c=d["".concat(p,".").concat(k)]||d[k]||u[k]||l;return a?r.createElement(c,i(i({ref:e},m),{},{components:a})):r.createElement(c,i({ref:e},m))}));function c(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var l=a.length,i=new Array(l);i[0]=k;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o[d]="string"==typeof t?t:n,i[1]=o;for(var s=2;s<l;s++)i[s]=a[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}k.displayName="MDXCreateElement"},4743:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var r=a(7462),n=(a(7294),a(3905));const l={sidebar_position:2,Title:"Basics of JS",Description:"Information on Primitives"},i="Basics of JavaScript",o={unversionedId:"JavaScript/Basics",id:"JavaScript/Basics",title:"Basics of JavaScript",description:"Variables and Values",source:"@site/docs/JavaScript/Basics.md",sourceDirName:"JavaScript",slug:"/JavaScript/Basics",permalink:"/learndocs/JavaScript/Basics",draft:!1,editUrl:"https://github.com/stevenovak123/learndocs/tree/master/docs/JavaScript/Basics.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,Title:"Basics of JS",Description:"Information on Primitives"},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/learndocs/JavaScript/intro"},next:{title:"Strings and Template Literals",permalink:"/learndocs/JavaScript/Strings"}},p={},s=[{value:"Variables and Values",id:"variables-and-values",level:2},{value:"Data types of JavaScript",id:"data-types-of-javascript",level:2},{value:"Variable Declaration",id:"variable-declaration",level:2},{value:"Operators",id:"operators",level:2},{value:"Arithmetic Operators",id:"arithmetic-operators",level:3},{value:"Assignment Operators",id:"assignment-operators",level:3},{value:"Comparison Operators",id:"comparison-operators",level:3},{value:"Logical Operators",id:"logical-operators",level:3},{value:"Type Operators",id:"type-operators",level:3}],m={toc:s},d="wrapper";function u(t){let{components:e,...a}=t;return(0,n.kt)(d,(0,r.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"basics-of-javascript"},"Basics of JavaScript"),(0,n.kt)("h2",{id:"variables-and-values"},"Variables and Values"),(0,n.kt)("p",null,"A variable is a holder for a representation of a value."),(0,n.kt)("p",null,"Value is the smallest piece of information that is stored in memory. There are two types of values in JS. They are either objects or primitive values"),(0,n.kt)("h2",{id:"data-types-of-javascript"},"Data types of JavaScript"),(0,n.kt)("p",null,"There are ",(0,n.kt)("strong",{parentName:"p"},"7")," primitve data types in JavaScript.They are:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Number"),": Floating point numbers. Used for decimals and integers"),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"String"),": Sequence of characters. Used for text. Can be wrapped in ",(0,n.kt)("inlineCode",{parentName:"li"},"' '")," or ",(0,n.kt)("inlineCode",{parentName:"li"},' " "')),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Boolean"),": Logical type that can only be ",(0,n.kt)("inlineCode",{parentName:"li"},"true")," or ",(0,n.kt)("inlineCode",{parentName:"li"},"false")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Undefined"),": Value of a variable that is not defined. eg: ",(0,n.kt)("inlineCode",{parentName:"li"},"let steve;")," this will hold undefined"),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Null")," : Empty value"),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"BigInt"),": Large numbers that cannot be held by Number"),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Symbol"),": Immutable and unique")),(0,n.kt)("h2",{id:"variable-declaration"},"Variable Declaration"),(0,n.kt)("p",null,"There are 3 types of variable declaration in Javascript."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"var: allows mutating. Avoid using"),(0,n.kt)("li",{parentName:"ul"},"let: allows mutating."),(0,n.kt)("li",{parentName:"ul"},"const: use when the value is to not be mutated.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Initial value is required."),(0,n.kt)("li",{parentName:"ul"},"Good practice to use this as first option.")))),(0,n.kt)("p",null,"If there is no keyword before declaring a variable then the variable will be declared in the global scope."),(0,n.kt)("p",null,"Code Snippets for the same"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'let name;\n// will return undefined\nlet age = 22;\n// used let as age changes\nconst birthYear = 2001;\n// used const as birthYear doesnt change\n\n// Global declaration\nopenSource = "This project is open source";\nconsole.log(openSource); //output => This project is open source\n')),(0,n.kt)("h2",{id:"operators"},"Operators"),(0,n.kt)("p",null,"There are many categories of operators:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"}," Arithmetic Operators")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"}," Assignment Operators ")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"}," Comparison Operators")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"}," Logical Operators ")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"}," Conditional Operators ")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"}," Type Operators "))),(0,n.kt)("p",null,"Their precendence can be found on the table present in ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#table"},"Mozilla Developer Network (MDN)")),(0,n.kt)("h3",{id:"arithmetic-operators"},"Arithmetic Operators"),(0,n.kt)("p",null,"These operators are used for arthimetic (mathematic) operations."),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Operator"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"+"),(0,n.kt)("td",{parentName:"tr",align:null},"Addition")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"-"),(0,n.kt)("td",{parentName:"tr",align:null},"Subtaction")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"*"),(0,n.kt)("td",{parentName:"tr",align:null},"Multiplication")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"*","*"),(0,n.kt)("td",{parentName:"tr",align:null},"Exponent (Raised to the power)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"/"),(0,n.kt)("td",{parentName:"tr",align:null},"Division")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"%"),(0,n.kt)("td",{parentName:"tr",align:null},"Modulo (Division Remainder)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"++"),(0,n.kt)("td",{parentName:"tr",align:null},"Increment")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"--"),(0,n.kt)("td",{parentName:"tr",align:null},"Decrement")))),(0,n.kt)("h3",{id:"assignment-operators"},"Assignment Operators"),(0,n.kt)("p",null,"These operators are used to assign a values. They follow right hand assignment i.e the value on the right is assigned to the left. Below are short hands of it as well"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Operator"),(0,n.kt)("th",{parentName:"tr",align:null},"Example"),(0,n.kt)("th",{parentName:"tr",align:null},"Same as"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"="),(0,n.kt)("td",{parentName:"tr",align:null},"x = y"),(0,n.kt)("td",{parentName:"tr",align:null},"x = y")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"+="),(0,n.kt)("td",{parentName:"tr",align:null},"x += y"),(0,n.kt)("td",{parentName:"tr",align:null},"x = x + y")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"-="),(0,n.kt)("td",{parentName:"tr",align:null},"x -= y"),(0,n.kt)("td",{parentName:"tr",align:null},"x = x - y")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"*","="),(0,n.kt)("td",{parentName:"tr",align:null},"x ","*","= y"),(0,n.kt)("td",{parentName:"tr",align:null},"x = x ","*","y")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"/="),(0,n.kt)("td",{parentName:"tr",align:null},"x /= y"),(0,n.kt)("td",{parentName:"tr",align:null},"x= x/y")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"%="),(0,n.kt)("td",{parentName:"tr",align:null},"x%y"),(0,n.kt)("td",{parentName:"tr",align:null},"x= x%y")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"*","*","="),(0,n.kt)("td",{parentName:"tr",align:null},"x ","*","*","=y"),(0,n.kt)("td",{parentName:"tr",align:null},"x= x ","*","*"," y")))),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"+")," can also be used to concatenate strings"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'let text = "What a wonderful ";\ntext += "day it is";\n\nconsole.log(text); // output => What a wonderful day it is\n')),(0,n.kt)("h3",{id:"comparison-operators"},"Comparison Operators"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Operator"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"=="),(0,n.kt)("td",{parentName:"tr",align:null},"Equal to")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"==="),(0,n.kt)("td",{parentName:"tr",align:null},"Equal value and Equal type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"!="),(0,n.kt)("td",{parentName:"tr",align:null},"Not equal")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"!=="),(0,n.kt)("td",{parentName:"tr",align:null},"Not Equal value or not equal type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},">"),(0,n.kt)("td",{parentName:"tr",align:null},"Greater than")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"<"),(0,n.kt)("td",{parentName:"tr",align:null},"Less than")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},">="),(0,n.kt)("td",{parentName:"tr",align:null},"Greater than or equal to")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"<="),(0,n.kt)("td",{parentName:"tr",align:null},"Less than or equal to")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"?"),(0,n.kt)("td",{parentName:"tr",align:null},"Ternary operator (checks boolean)")))),(0,n.kt)("h3",{id:"logical-operators"},"Logical Operators"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Operator"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"&&"),(0,n.kt)("td",{parentName:"tr",align:null},"logical AND")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"|","|"),(0,n.kt)("td",{parentName:"tr",align:null},"logical OR")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"!"),(0,n.kt)("td",{parentName:"tr",align:null},"logical NOT")))),(0,n.kt)("h3",{id:"type-operators"},"Type Operators"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Operator"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"typeof"),(0,n.kt)("td",{parentName:"tr",align:null},"Returns the type of variable")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"instanceof"),(0,n.kt)("td",{parentName:"tr",align:null},"Returns true if an object is an instance of object type")))))}u.isMDXComponent=!0}}]);