"use strict";(self.webpackChunkmy_learnings=self.webpackChunkmy_learnings||[]).push([[783],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(a),d=r,m=u["".concat(o,".").concat(d)]||u[d]||g[d]||l;return a?n.createElement(m,s(s({ref:t},c),{},{components:a})):n.createElement(m,s({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,s=new Array(l);s[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<l;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5415:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>g,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const l={sidebar_position:3,Title:"Strings in JS",Description:"Information on Strings and Template Literals in JS"},s="Strings and Template Literals",i={unversionedId:"JavaScript/Strings",id:"JavaScript/Strings",title:"Strings and Template Literals",description:"Strings",source:"@site/docs/JavaScript/Strings.md",sourceDirName:"JavaScript",slug:"/JavaScript/Strings",permalink:"/learndocs/JavaScript/Strings",draft:!1,editUrl:"https://github.com/stevenovak123/learndocs/tree/master/docs/JavaScript/Strings.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,Title:"Strings in JS",Description:"Information on Strings and Template Literals in JS"},sidebar:"tutorialSidebar",previous:{title:"Basics of JavaScript",permalink:"/learndocs/JavaScript/Basics"},next:{title:"Functions",permalink:"/learndocs/JavaScript/Functions"}},o={},p=[{value:"Strings",id:"strings",level:2},{value:"Template Literals",id:"template-literals",level:2},{value:"String Methods",id:"string-methods",level:2},{value:"length",id:"length",level:3},{value:"slice(start, end)",id:"slicestart-end",level:3},{value:"substring(start, end)",id:"substringstart-end",level:3},{value:"substr(start, length)",id:"substrstart-length",level:3},{value:"replace()",id:"replace",level:3},{value:"replaceAll()",id:"replaceall",level:3},{value:"toUpperCase() &amp; toLowerCase()",id:"touppercase--tolowercase",level:3}],c={toc:p},u="wrapper";function g(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"strings-and-template-literals"},"Strings and Template Literals"),(0,r.kt)("h2",{id:"strings"},"Strings"),(0,r.kt)("p",null,"A JavaScript string is zero or more characters written inside quotes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let text = "Steve Dsouza";\n')),(0,r.kt)("p",null,"You can use single or double quotes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let carName1 = \"Ferrari\";\n// prettier-ignore\nlet carName2 = 'Toyota';\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"the comment prettier-ignore is for the formatter to abide by my IDE rules"),"."),(0,r.kt)("p",null,"Quotes can be used inside a string, as long as they don't match the quotes surrounding the string."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let answer1 = "It\'s alright";\nlet answer2 = "He is called \'Johnny\'";\nlet answer3 = \'He is called "Johnny"\';\n')),(0,r.kt)("h2",{id:"template-literals"},"Template Literals"),(0,r.kt)("p",null,"Template is an easier way to write strings and insert variables in them. This came with ES6. They make use of back-tics (",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"``")),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let text = `Hello World !`;\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Example using ",(0,r.kt)("inlineCode",{parentName:"p"},"+")," to concat strings")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const name = "Steve";\nconst job = "programmer";\nconst age = 22;\nconst sentenceWithString =\n  name + " is " + "a " + job + " and is " + age + " years old.";\nconsole.log(sentenceWithString);\n//output=> Steve is a programmer and is 22 years old\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Example with Template literals")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const name = "Steve";\nconst job = "programmer";\nconst age = 22;\nconst sentenceWithLiteral = `${name} is a ${job} and is ${age} years old `;\nconsole.log(sentenceWithLiteral);\n//output=> Steve is a programmer and is 22 years old\n')),(0,r.kt)("p",null,"The use of ",(0,r.kt)("inlineCode",{parentName:"p"},"${}")," to enter values is called interpolation. Interpolation is the automatic replacing of variables with real values."),(0,r.kt)("h2",{id:"string-methods"},"String Methods"),(0,r.kt)("p",null,"A few String methods are as follows."),(0,r.kt)("h3",{id:"length"},"length"),(0,r.kt)("p",null,"returns the length of the string."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let text = "STEVE";\nlet length = text.length;\nconsole.log(length); // output => 5\n')),(0,r.kt)("h3",{id:"slicestart-end"},"slice(start, end)"),(0,r.kt)("p",null,"Returns the extracted part as a new string (end is not included)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let text = "Mango, Banana, Pear";\nlet part = text.slice(14, 19);\nconsole.log(part); // output => Pear\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the second param is omitted, the method will slice till the end of string.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let text = "Mango, Banana, Pear";\nlet part = text.slice(6);\nconsole.log(part); // output => Banana, Pear\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the parameter is negative then, the positions are counted from the end.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let text = "Mango, Banana, Pear";\nlet part = text.slice(-12, -6);\nconsole.log(part); // output => Banana\n')),(0,r.kt)("h3",{id:"substringstart-end"},"substring(start, end)"),(0,r.kt)("p",null,"It is similar to",(0,r.kt)("inlineCode",{parentName:"p"},"slice()"),"; the difference being the start and end value less than 0 are treated as 0."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If you omit the second parameter, .",(0,r.kt)("inlineCode",{parentName:"li"},"substring()")," will slice out the rest of the string.")),(0,r.kt)("h3",{id:"substrstart-length"},"substr(start, length)"),(0,r.kt)("p",null,"It is similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"slice()"),"; The difference is that the second parameter specifies the length of the extracted part."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let text = "Mango, Banana, Pear";\nlet part = text.slice(7, 6); //output => Banana\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If you omit the second parameter, .",(0,r.kt)("inlineCode",{parentName:"li"},"substr()")," will slice out the rest of the string.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let text = "Mango, Banana, Pear";\nlet part = text.slice(14);\nconsole.log(part); // output => Pear\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the parameter is negative then, the positions are counted from the end.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let text = "Mango, Banana, Pear";\nlet part = text.slice(-12);\nconsole.log(part); // output => Banana, Pear\n')),(0,r.kt)("h3",{id:"replace"},"replace()"),(0,r.kt)("p",null,"Replaces a specified value with another value in a string. It returns a new string"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let text = "Please visit the office";\nlet newText = text.replace("the", "Deloitte");\nconsole.log(newText); // output=>"Please visit Deloitte office"\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It does not change the string it is called on."),(0,r.kt)("li",{parentName:"ul"},"It replaces only the first match."),(0,r.kt)("li",{parentName:"ul"},"It is case sensitive."),(0,r.kt)("li",{parentName:"ul"},"Can use regular expressions (Written without quotes).")),(0,r.kt)("h3",{id:"replaceall"},"replaceAll()"),(0,r.kt)("p",null,"Replaces all the strings to be repalced. Similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"replace()")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let text = "I love cats. Cats are very easy to love. Cats are very popular.";\nreplacedText = text.replaceAll("Cats", "Dogs");\nconsole.log(replacedText);\n//output =>I love dogs. Dogs are very easy to love. Dogs are very popular.\n')),(0,r.kt)("h3",{id:"touppercase--tolowercase"},"toUpperCase() & toLowerCase()"),(0,r.kt)("p",null,"Converts strings to upper case and lower case ."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let text = "Hello world";\nconsole.log(text.toUpperCase()); //output=> HELLO WORLD\nconsole.log(text.toLowerCase()); //output=> hello world\n')))}g.isMDXComponent=!0}}]);