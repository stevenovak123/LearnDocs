"use strict";(self.webpackChunkmy_learnings=self.webpackChunkmy_learnings||[]).push([[975],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=n.createContext({}),s=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=s(a),d=i,k=u["".concat(c,".").concat(d)]||u[d]||m[d]||r;return a?n.createElement(k,l(l({ref:t},p),{},{components:a})):n.createElement(k,l({ref:t},p))}));function k(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},9112:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var n=a(7462),i=(a(7294),a(3905));const r={sidebar_position:3,title:"Theoretical JS",description:"Introduction to JavaScript"},l="Theory of JavaScript",o={unversionedId:"JavaScript/Theory",id:"JavaScript/Theory",title:"Theoretical JS",description:"Introduction to JavaScript",source:"@site/docs/JavaScript/Theory.md",sourceDirName:"JavaScript",slug:"/JavaScript/Theory",permalink:"/learndocs/JavaScript/Theory",draft:!1,editUrl:"https://github.com/stevenovak123/learndocs/tree/master/docs/JavaScript/Theory.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Theoretical JS",description:"Introduction to JavaScript"},sidebar:"tutorialSidebar",previous:{title:"Basics of JavaScript",permalink:"/learndocs/JavaScript/Basics"},next:{title:"Strings and Template Literals",permalink:"/learndocs/JavaScript/Strings"}},c={},s=[{value:"JavaScript Engine",id:"javascript-engine",level:2},{value:"Just-in-time Compilation process",id:"just-in-time-compilation-process",level:2},{value:"JavaScript Runtime",id:"javascript-runtime",level:2},{value:"Execution Context &amp; Call Stack",id:"execution-context--call-stack",level:2},{value:"Contents of execution context",id:"contents-of-execution-context",level:3},{value:"Scope &amp; Scope chain",id:"scope--scope-chain",level:3},{value:"Variable Environment",id:"variable-environment",level:3},{value:"<em>this</em> keyword",id:"this-keyword",level:3},{value:"this keyword &amp; its behaviour with different methods",id:"this-keyword--its-behaviour-with-different-methods",level:4},{value:"Call Stack",id:"call-stack",level:2}],p={toc:s},u="wrapper";function m(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"theory-of-javascript"},"Theory of JavaScript"),(0,i.kt)("h2",{id:"javascript-engine"},"JavaScript Engine"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"JavaScript engine is a program that executes JavaScript code."),(0,i.kt)("li",{parentName:"ul"},"One of the well known JS engines are the Google' V8 engine.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Powers Chrome and NodeJs."))),(0,i.kt)("li",{parentName:"ul"},"Every engine contains a ",(0,i.kt)("strong",{parentName:"li"},"Call Stack")," and ",(0,i.kt)("strong",{parentName:"li"},"Heap"),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The Call stack is where the code is executed."),(0,i.kt)("li",{parentName:"ul"},"Contains the execution context."),(0,i.kt)("li",{parentName:"ul"},"Heap is where all the objects are stored in memory."),(0,i.kt)("li",{parentName:"ul"},"It is a unstructured memory pool."))),(0,i.kt)("li",{parentName:"ul"},"Js is a Just-in-time compiled language.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"that means the code in compiled and instantly interpreted.")))),(0,i.kt)("h2",{id:"just-in-time-compilation-process"},"Just-in-time Compilation process"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When the code enters the engine, it is first parsed.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"It is parsed into ",(0,i.kt)("strong",{parentName:"li"},"Abstract syntax tree")," (AST).",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Takes all the values that make sense to the language and stored in a structured manner"),"-"))))),(0,i.kt)("li",{parentName:"ul"},"The AST is then compiled into machine code which is instanly executed.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This execution happens in the Call stack of the engine."),(0,i.kt)("li",{parentName:"ul"},"This program is optimized again and again, the unoptimized code is replaced or discarded."),(0,i.kt)("li",{parentName:"ul"},"This makes JS fast. Different engines do this different ways of optimization.")))),(0,i.kt)("h2",{id:"javascript-runtime"},"JavaScript Runtime"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"JavaScript runtime contains of the JS engine and Browser. (most common)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"JS engine ,WEB API's, Callback Queues are components of the run time."),(0,i.kt)("li",{parentName:"ul"},"Web API's provide functionality to the engine and are accessible on the window object."),(0,i.kt)("li",{parentName:"ul"},"Callback queues are a datastructure that contains all callback functions ready to be executed.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Callback functions are called when the callstack is empty. This happens due to the eventloop."),(0,i.kt)("li",{parentName:"ul"},"This is how the non-blocking concurrency model."))))),(0,i.kt)("li",{parentName:"ul"},"NodeJs is similar but instead of Web API's there are C++ bindings and thread pools.")),(0,i.kt)("h2",{id:"execution-context--call-stack"},"Execution Context & Call Stack"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"After compilation. A Global execution context is created for the top level code. Top level code is the code that is called. (Not function definitions)"),(0,i.kt)("li",{parentName:"ul"},"Execution context is an abstract concept, an environment where JS is executed."),(0,i.kt)("li",{parentName:"ul"},"Only one global execution context is created by default."),(0,i.kt)("li",{parentName:"ul"},"Once the top level code is executed, each function call gets its own execution context that is stored within the global context.")),(0,i.kt)("h3",{id:"contents-of-execution-context"},"Contents of execution context"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Scope Chain : How to organise the variables."),(0,i.kt)("li",{parentName:"ol"},"Variable Environment : Contains all variables, functions and argument objects."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"this")," keyword.")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Arrow functions ",(0,i.kt)("strong",{parentName:"p"},"don't")," have their own argument objects and ",(0,i.kt)("em",{parentName:"p"},"this")," keyword. However they can use the closest regular functions ",(0,i.kt)("em",{parentName:"p"},"argument object")," and ",(0,i.kt)("em",{parentName:"p"},"this")," keyword.")),(0,i.kt)("h3",{id:"scope--scope-chain"},"Scope & Scope chain"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Scope is the space or environment where a certain variable is declared.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Can be ",(0,i.kt)("strong",{parentName:"li"},"global"),",",(0,i.kt)("strong",{parentName:"li"},"function")," and ",(0,i.kt)("strong",{parentName:"li"},"block")," scope."))),(0,i.kt)("li",{parentName:"ul"},"Scoping controls how the variables of the program are organised and accessed.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"JavaScript is ",(0,i.kt)("strong",{parentName:"li"},"Lexically")," scoped."),(0,i.kt)("li",{parentName:"ul"},"This means that the scoping is determined by the placement of functions and blocks in the code."))),(0,i.kt)("li",{parentName:"ul"},"Global scope is for the top level code. (outside any function or block)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Accessible everywhere."))),(0,i.kt)("li",{parentName:"ul"},"Function scope is for accessibility inside the function.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Also called local scope."))),(0,i.kt)("li",{parentName:"ul"},"Block scope is accessible inside the block. (ES6 feature)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"only apply to ",(0,i.kt)("inlineCode",{parentName:"li"},"let")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"const"),"."),(0,i.kt)("li",{parentName:"ul"},"functions are block scoped when used with strict mode."))),(0,i.kt)("li",{parentName:"ul"},"Scope chain is the ability to look up to the parent scope for missing variables.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Scope Chain means that one variable has a scope (it may be global or local/function or block scope) is used by another variable or function having another scope (may be global or local/function or block scope).")))),(0,i.kt)("h3",{id:"variable-environment"},"Variable Environment"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Variables are created through a mechanism called ",(0,i.kt)("strong",{parentName:"li"},"Hoisting"),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Hoisting is making available types of variables accessible in the code before they are actually declared."),(0,i.kt)("li",{parentName:"ul"},"The code is scanned for variable declarations and created in the ",(0,i.kt)("em",{parentName:"li"},"variable environment"),"."))),(0,i.kt)("li",{parentName:"ul"},"It does not work the same for all.")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},"Hoisted"),(0,i.kt)("th",{parentName:"tr",align:null},"Initial Value"),(0,i.kt)("th",{parentName:"tr",align:null},"Scope"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"function")," Declaration"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"Actual Function"),(0,i.kt)("td",{parentName:"tr",align:null},"Block")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"var")," variables"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"Undefined"),(0,i.kt)("td",{parentName:"tr",align:null},"Function")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"let")," & ",(0,i.kt)("inlineCode",{parentName:"td"},"const")),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Uninitalized ,TDZ"),(0,i.kt)("td",{parentName:"tr",align:null},"Block")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"function")," expression & arrow functions"),(0,i.kt)("td",{parentName:"tr",align:null},"depends if used with var or let / const"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null})))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"TDZ"))," is Temporal dead zone. It is the state where variables are un-reachable.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"They are in scope but they aren't declared."),(0,i.kt)("li",{parentName:"ul"},"Makes it easier to avoid and catch errors."),(0,i.kt)("li",{parentName:"ul"},"Makes const variables work.")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const myName = 'Steve';\nif (myName === 'Steve') {\n  // highlight-start\n  console.log(`Steve is a ${job}`);\n  const age = 2023 - 2001;\n  console.log(age);\n  //highlight-end\n  const job = 'programmer'; //highlighted area is the TDZ for job\n}\n")),(0,i.kt)("h3",{id:"this-keyword"},(0,i.kt)("em",{parentName:"h3"},"this")," keyword"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"It is a special variable created for every execution context.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"It takes the value(points to) of the owner of the function in which it exists."))),(0,i.kt)("li",{parentName:"ul"},"Its value is not static."),(0,i.kt)("li",{parentName:"ul"},"Value depends on how the function is called and value is assigned when the function is called.")),(0,i.kt)("h4",{id:"this-keyword--its-behaviour-with-different-methods"},"this keyword & its behaviour with different methods"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},"value of ",(0,i.kt)("em",{parentName:"th"},"this")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Method"),(0,i.kt)("td",{parentName:"tr",align:null},"Object calling the method")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Simple function"),(0,i.kt)("td",{parentName:"tr",align:null},"undefined")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Arrow functions"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("em",{parentName:"td"},"this")," of surrounding function (Lexical this)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Event listener"),(0,i.kt)("td",{parentName:"tr",align:null},"DOM element that the handler is attached to")))),(0,i.kt)("h2",{id:"call-stack"},"Call Stack"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This is the place where all the execution contexts get stacked on top of each other."),(0,i.kt)("li",{parentName:"ul"},"This keeps track of where the execution has reached."),(0,i.kt)("li",{parentName:"ul"},"Once the code is executed and the function returns its contents. It is popped out of the call stack.")))}m.isMDXComponent=!0}}]);